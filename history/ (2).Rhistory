hes_sexdescription=mix.data$sexdescription,
hes_ageatstartofepisode=mix.data$ageatstartofepisode,
hes_dischargeddeadoralive=mix.data$dischargeddeadoralive,
lab_organismname=NA, lab_group=NA,
codesIndicators.mix,
Gram=NA)
head(mix.data.simple[mix.data.simple$adm_diff_dis<0,])
head(mix.data.total[is.na(mix.data.total$ID),])
head(mix.data.simple[is.na(mix.data.simple$hes_ID),])
head(mix.data.simple[mix.data.simple$adm_diff_dis<0,])
View(mix.data.simple)
survDataByGroup.rm <- lapply(survDataByGroup, function(x) x[x$time>=2,])
min(survDataByGroup[[1]]$time)
write.table(file="survDataByGroup1.txt", survDataByGroup[[1]])
min(survDataByGroup[[1]]$time, na.rm=T)
min(survDataByGroup.cens[[1]]$time, na.rm=T)
min(survDataByGroup.rm[[1]]$time, na.rm=T)
min(survDataByGroup.rm[[2]]$time, na.rm=T)
min(survDataByGroup.rm[[3]]$time, na.rm=T)
min(survDataByGroup.rm[[3]]$time)
survDataByGroup <- lapply(survDataByGroup, function(x) x[!is.na(x$time),])
min(survDataByGroup.rm[[3]]$time)
survDataByGroup.rm <- lapply(survDataByGroup, function(x) x[x$time>=2,])
min(survDataByGroup.rm[[3]]$time)
min(survDataByGroup[[3]]$time)
nrow(survDataByGRoup[["all"]])
nrow(survDataByGroup[["all"]])
output.LOS <- bygroupLOS(survDataByGroup, type, standerr=FALSE)
load(file=".\\output\\highlevelinput_spellink.Rdata")
survDataByGroup <- survDataByGroup[c("all","1","-1",
"COAGULASE NEGATIVE STAPHYLOCOCCUS","ENTEROCOCCUS","STAPHYLOCOCCUS AUREUS","other","E. COLI")]
survDataByGroup <- lapply(survDataByGroup, function(x) x[!is.na(x$time),])
survDataByGroup.rm <- lapply(survDataByGroup, function(x) x[x$time>=2,])
output.LOS <- bygroupLOS(survDataByGroup, type, standerr=FALSE)
multistateplots.org(output.LOS)
## length of stay box plots
bygroupLOS.boxplot(output.LOS)
bygroupLOS.boxplot <- function(output.LOS){
#
# box plots for each group with error bars
#
# check order of names is correct
#namesGroup.short <- c("E. Coli", "Staph aureus", "Acinetobacter", "CoNS", "Enterobacter", "Enterococcus",
#                     "Klebsiella", "Micrococcus", "N. Meningitidis", "Non-P. Strep", "Other", "P. Aeruginosa",
#                    "Salmonella", "Strep A", "Strep B", "Strep Pneumoniae")
namesGroup.short <- names(output.LOS)
wmeans <- se <- NA
numGroup <- length(output.LOS)
names <- names(output.LOS)
for (i in 1:numGroup){
wmeans[i] <- output.LOS[[i]]$clos.data$e.phi
se[i] <- output.LOS[[i]]$se
}
wmeans <- unlist(wmeans)
se<-0.5		# dummy test value
#par(mar=c(10, 4, 2, 0.5))	# increase the bottom margin for organism names
#plotCI(barplot(wmeans, col="gray",ylim=c(-2,min(20,max(wmeans+se, na.rm=TRUE))), names=namesGroup.short, las=2, main="LOS by organism group with se"),
#      wmeans, uiw=se, add=TRUE)
forestplot(labeltext=cbind(namesGroup.short),zero=0, mean=wmeans, lower=wmeans-se, upper=wmeans+se, align=NULL)#  , nn=1) # box size 1/se^2
#plotCI(wmeans,uiw=5, ylab="")		# simple error bar plots
#abline(h=0, lty=2)
}
## END OF FUNCTION ##
bygroupLOS.boxplot(output.LOS)
output.LOS <- bygroupLOS(survDataByGroup.rm, type, standerr=FALSE)
bygroupLOS.boxplot(output.LOS)
multistateplots.org(output.LOS)
survDataByGroup.rm <- lapply(survDataByGroup, function(x) x[x$time>=0,])
output.LOS <- bygroupLOS(survDataByGroup.rm, type, standerr=FALSE)
bygroupLOS.boxplot(output.LOS)
names(survData)
lapply(survDataByGroup, function(x) min(x$spectime[x$infstatus==1]))
survDataByGroup.rm <- lapply(survDataByGroup, function(x) x[x$time>=min(x$spectime[x$infstatus==1]),])  # min=2
## by organism groups
output.LOS <- bygroupLOS(survDataByGroup.rm, type, standerr=FALSE)
## length of stay box plots
bygroupLOS.boxplot(output.LOS)
## send LOS pdf figures to file
multistateplots.org(output.LOS)
highlevelHCAI <- function(survDataByGroup){
## only analyse the most frequent organism groups
## most relevant and quicker
survDataByGroup <- survDataByGroup[c("all","1","-1",
"COAGULASE NEGATIVE STAPHYLOCOCCUS","ENTEROCOCCUS","STAPHYLOCOCCUS AUREUS","other","E. COLI")]
###############################
# Cox regression hazard ratio #
###############################
## for death, discharge or both as outcomes of interest
## by each organism group
## using naive, time-dependent cause-specific and time-dependent subdistribution approaches
## non-function equivalent script for single analyses in
## HCAI_competing_risks_analysis_BOTH.R
output.HR <- byOrganismHR(survDataByGroup) # ~ hr
#output.HR.cens <- byOrganismHR(survDataByGroup.cens)
## extract the output elements of interest ##
## and tabulate in appropriate format ##
## long table format with naive, cause-specific and subdistribution entries
res <- table.HR(output.HR)
#write.csv(res, ".\\output\\HRresultstable.csv")
## part deprecated by table3.HR
## output used in HRboxplot.batch()
res2 <- table2.HR(res, model="timedependentcausespec")
#res2 <- table2.HR(res, model="timedeptsubdistn")
## wide format for separate cause-specific and subdistribution tables
#res3 <- table3.HR(res, hrtype="naive")
#write.csv(res3, ".\\output\\HRresultstablenaive.csv")
#res3 <- table3.HR(res, hrtype="timedeptsubdistn")
#write.csv(res3, ".\\output\\HRresultstableCS.csv")
res3 <- table3.HR(res, hrtype="timedependentcausespec")
#write.csv(res3, ".\\output\\HRresultstableSUB.csv")
##################
# Length of stay #
##################
## including bootstrapping is very slow
## non-function equivalent script for single analysis in
## HCAI_LOS.R
type <- ""	# "alive", "death"	# causes-specific/subdistn event times
## TODO ## why do these NAs exist??
survDataByGroup <- lapply(survDataByGroup, function(x) x[!is.na(x$time),])
## all patients are included in non-infected dataset
## remove patients with hosptial stay under 2 days
## to match the infected cases dataset
survDataByGroup.rm <- lapply(survDataByGroup, function(x) x[x$time>=min(x$spectime[x$infstatus==1]),])  # min=2
## by organism groups
output.LOS <- bygroupLOS(survDataByGroup.rm, type, standerr=FALSE)
list(output.HR=output.HR, res=res, res2=res2, res3=res3, output.LOS.org=output.LOS.org,
output.LOS.gender=output.LOS.gender, output.LOS.age=output.LOS.age)
}
output.Gender <- highlevelHCAI((survDataByGender)
output.Gender <- highlevelHCAI(survDataByGender)
highlevelHCAI <- function(survDataByGroup){
###############################
# Cox regression hazard ratio #
###############################
## for death, discharge or both as outcomes of interest
## by each organism group
## using naive, time-dependent cause-specific and time-dependent subdistribution approaches
## non-function equivalent script for single analyses in
## HCAI_competing_risks_analysis_BOTH.R
output.HR <- byOrganismHR(survDataByGroup) # ~ hr
#output.HR.cens <- byOrganismHR(survDataByGroup.cens)
## extract the output elements of interest ##
## and tabulate in appropriate format ##
## long table format with naive, cause-specific and subdistribution entries
res <- table.HR(output.HR)
#write.csv(res, ".\\output\\HRresultstable.csv")
## part deprecated by table3.HR
## output used in HRboxplot.batch()
res2 <- table2.HR(res, model="timedependentcausespec")
#res2 <- table2.HR(res, model="timedeptsubdistn")
## wide format for separate cause-specific and subdistribution tables
#res3 <- table3.HR(res, hrtype="naive")
#write.csv(res3, ".\\output\\HRresultstablenaive.csv")
#res3 <- table3.HR(res, hrtype="timedeptsubdistn")
#write.csv(res3, ".\\output\\HRresultstableCS.csv")
res3 <- table3.HR(res, hrtype="timedependentcausespec")
#write.csv(res3, ".\\output\\HRresultstableSUB.csv")
##################
# Length of stay #
##################
## including bootstrapping is very slow
## non-function equivalent script for single analysis in
## HCAI_LOS.R
type <- ""	# "alive", "death"	# causes-specific/subdistn event times
## TODO ## why do these NAs exist??
survDataByGroup <- lapply(survDataByGroup, function(x) x[!is.na(x$time),])
## all patients are included in non-infected dataset
## remove patients with hosptial stay under 2 days
## to match the infected cases dataset
survDataByGroup.rm <- lapply(survDataByGroup, function(x) x[x$time>=min(x$spectime[x$infstatus==1]),])  # min=2
## by organism groups
output.LOS <- bygroupLOS(survDataByGroup.rm, type, standerr=FALSE)
list(output.HR=output.HR, res=res, res2=res2, res3=res3, output.LOS.org=output.LOS.org,
output.LOS.gender=output.LOS.gender, output.LOS.age=output.LOS.age)
}
output <- highlevelHCAI(survDataByGroup)
output.Gender <- highlevelHCAI(survDataByGender)
names(survDataByGender)
survDataByGender<-survDataByGender[[c("Female","Male")]]
names(survDataByGender)
hed(survDataByGender)
head(survDataByGender)
## stratify by factor levels into separate survData samples
## for use in multistate model excess LOS calculations
survDataByGender <<- split(survData, survData$gender) # replaces: survDataByGender <<- stratSurvData(survData, survData$gender)
survDataByAge    <<- split(survData, survData$agegr)  # replaces: survDataByAge <<- stratSurvData(survData, survData$agegr)
## drop "Not known" & "Not specified"
survDataByGender<-survDataByGender[c("Female","Male")]
names(survDataByGender)
rm(list=ls())
library(foreign)  # read.dta
library(survival)
library(mvna)
library(etm)
setwd("H:\\caesarean SSI LOS")
## original stata data format file
#survData <- read.dta(".\\C section 2009 4110 Jan 13.dta")
#write.table(survData,".\\data.txt")
survData <- read.table(".\\data.txt")
##############
# preprocess #
##############
## extract field of interest
## look at duplicate id entries
## 831 1447 1483
x<-data[data$id==data[831,"id"],]
View(survData)
x <- survData[survData$id==data[831,"id"],]
x <- survData[survData$id==survData[831,"id"],]
x
sum(survData$days2inf<survData$LOSop, na.rm=T)  # 23
x <- survData[(survData$days2inf<survData$LOSop) & !is.na(survData$days2inf),]
det <- survData$days2inf<survData$LOSop
sum(det, na.rm=TRUE)  # 23
survData.inf <- survData[survData$detection==1 & !is.na(survData$days2inf),]
## everyone else
survData.mix <- survData[survData$detection!=1 | is.na(survData$detection),]
ninf <- nrow(survData.inf)
## e.g. when admission date = discharge date
epsilon <- 0.1
originalid <- 0  						# original array single-line (wide) format patient row id
tvdata.inf <- data.frame(id=rep(1:ninf,each=2),
tstart=NA,tstop=NA,inf=NA,
survData.inf[rep(1:ninf,each=2),
c("age", "antimicpx", "asascore", "bmicat", "bloodloss", "complicatedcsd",
"csdtype", "diab", "LOSpreop", "LOSar", "durationoperation",
"durationofactivelabour", "woundclass")])
View(tvdata.inf)
numRows.new <- 2*nrow(survData.inf)
oddRows <- seq(1,numRows.new,by=2)
oddRows
originalid <- 0L  						# original array single-line (wide) format patient row id
originalid
oddRows+1
seq(0:1,2)
?seq
seq(0:1,length.out=2)
tvdata.inf <- data.frame(id=rep(1:ninf,each=2),
tstart=NA,tstop=NA,inf=NA,
survData.inf[rep(1:ninf,each=2),
c("age", "antimicpx", "asascore", "bmicat", "bloodloss", "complicatedcsd",
"csdtype", "diab", "LOSpreop", "LOSar", "durationoperation",
"durationofactivelabour", "woundclass")])
## number of new rows for infected patients
View(tvdata.inf)
numRows.new <- 2*ninf
oddRows <- seq(1,numRows.new,by=2)
tvdata.inf[oddRows,"tstart"]<- 0    # admission start time always zero
tvdata.inf[,"inf"]   <- seq(0:1,length.out=numRows.new)  	# not infected yet
View(tvdata.inf)
seq(0:1,length.out=numRows.new)
seq(0:1,along.with=numRows.new)
rep(0:1,each=2)
seq(0:1,along.with=numRows.new)
seq(0:1,length.out=numRows.new)
?rep
rep(0:1,times=numRows.new)
tvdata.inf[,"inf"]   <- rep(0:1,times=numRows.new)  	# not infected yet
rep(0:1,length.out=numRows.new)
tvdata.inf[,"inf"]   <- rep(0:1,length.out=numRows.new)  	# not infected yet
View(tvdata.inf)
if (numRows.new > 0){ # only for infected cases
for (i in oddRows){		# fill two rows at a time
originalid <- originalid+1
# 1) admission -> infection
tvdata.inf[i,"tstop"] <- ifelse(survData.inf$days2inf[originalid]==0, epsilon, survData.inf$days2inf[originalid])	# so start<stop due to same day events
# 2) infection -> death/discharge
tvdata.inf[i+1,"tstart"] <- tvdata.inf[i,"tstop"]     # start next state at the end time of first state
# stop time is the event time death, discharge or administrative censoring
# to ensure start<stop add epsilon due to same day events
tvdata.inf[i+1,"tstop"]  <- ifelse(survData.inf$LOSop[originalid]==survData.inf$days2inf[originalid],
survData.inf$LOSop[originalid]+epsilon,
survData.inf$LOSop[originalid])
}
}
View(tvdata.inf)
tvdata.mix <- data.frame(id=originalid+10+seq_along(survData.mix$ssi),
tstart=0,
tstop=ifelse(survData.mix$LOSop>0, survData.mix$LOSop, epsilon),
inf=0,
survData.mix[,c("age", "antimicpx", "asascore", "bmicat", "bloodloss", "complicatedcsd",
"csdtype", "diab", "LOSpreop", "LOSar", "durationoperation",
"durationofactivelabour", "woundclass")])
tvdata <- rbind(tvdata.inf,tvdata.mix)
save(tvdata, file=".\\tvdata.RData")
?step
library(MASS)
cx <- coxph(Surv(tstart, tstop, rep.int(1,length(tstop)))~cluster(id)+inf+LOSpreop, data=tvdata)
plot(survfit(cx), , xlab='Weeks', ylab='Proportion Not Rearrested')
outcx=stepAIC(cx,direction="both")
outcx=stepAIC(cx,direction="backwards")
outcx=stepAIC(cx,direction="backward")
cx <- coxph(Surv(tstart, tstop, rep.int(1,length(tstop)))~cluster(id)+inf+antimicpx+asascore+bmicat+bloodloss+complicatedcsd+csdtype+diab+LOSpreop+durationoperation+durationofactivelabour+woundclass, data=tvdata)
plot(survfit(cx), , xlab='Weeks', ylab='Proportion Not Rearrested')
plot(cx, , xlab='Weeks', ylab='Proportion Not Rearrested')
outcx=stepAIC(cx,direction="backward")
y
cx <- coxph(Surv(tstart, tstop, rep.int(1,length(tstop)))~cluster(id)+inf+antimicpx+asascore+bmicat+bloodloss+complicatedcsd+csdtype+diab+LOSpreop+durationoperation+durationofactivelabour+woundclass, data=tvdata)
outcx=stepAIC(cx,direction="both")
PHmodel <- coxph(Surv(tstart, tstop, rep.int(1,length(tstop)))~cluster(id)+inf+antimicpx+asascore+bmicat+bloodloss+complicatedcsd+csdtype+diab+LOSpreop+durationoperation+durationofactivelabour+woundclass, data=tvdata)
outcx <- stepAIC(PHmodel, scope = list(lower = ~cluster(id)+inf))
PHmodel <- coxph(Surv(tstart, tstop, rep.int(1,length(tstop)))~cluster(id)+inf+LOSpreop, data=tvdata)
outcx <- stepAIC(PHmodel, scope = list(lower = ~cluster(id)+inf))
?na.omit
DF <- data.frame(x = c(1, 2, 3), y = c(0, 10, NA))
DF
na.omit(DF)
x<-na.omit(tvdata)
View(tvdata)
View(x)
View(tvdata)
tvdata.naomit <- na.omit(tvdata)
PHmodel <- coxph(Surv(tstart, tstop, rep.int(1,length(tstop)))~cluster(id)+inf+antimicpx+asascore+bmicat+bloodloss+complicatedcsd+csdtype+diab+LOSpreop+durationoperation+durationofactivelabour+woundclass, data=tvdata.naomit)
outcx <- stepAIC(PHmodel, scope = list(lower = ~cluster(id)+inf))
outcx=stepAIC(PHmodel,direction="both")
PHmodel <- coxph(Surv(tstart, tstop, rep.int(1,length(tstop)))~cluster(id)+inf+antimicpx+asascore+bmicat+bloodloss+complicatedcsd+csdtype+diab+LOSpreop+durationoperation+durationofactivelabour+woundclass, data=tvdata.naomit)
PHmodel
summary(coxph(Surv(tstart, tstop, rep.int(1,length(tstop)))~cluster(id)+inf, data=tvdata))
PHmodel <- coxph(Surv(tstart, tstop, rep.int(1,length(tstop)))~cluster(id)+inf+LOSpreop, data=tvdata)
plot(survfit(Surv(tstart, tstop, rep.int(1,length(tstop)))~cluster(id)+inf+LOSpreop, data=tvdata), main="", lty=c(1,2), col=c(1,2), xlab="time (days)", ylab="S_hat")
PHmodel <- coxph(Surv(tstart, tstop, rep.int(1,length(tstop)))~inf, data=tvdata)
plot(survfit(Surv(tstart, tstop, rep.int(1,length(tstop)))~cluster(id)+inf+LOSpreop, data=tvdata), main="", lty=c(1,2), col=c(1,2), xlab="time (days)", ylab="S_hat")
plot(survfit(Surv(tstart, tstop, rep.int(1,length(tstop)))~inf, data=tvdata), main="", lty=c(1,2), col=c(1,2), xlab="time (days)", ylab="S_hat")
legend(40, 0.6, legend=c("Control","inf"), lty = c(1,2), col=c(1,2), bty = "n", cex=0.7)
legend(30, 0.6, legend=c("Control","inf"), lty = c(1,2), col=c(1,2), bty = "n", cex=0.7)
legend(30, 0.8, legend=c("Control","inf"), lty = c(1,2), col=c(1,2), bty = "n", cex=0.7)
plot(survfit(Surv(tstart, tstop, rep.int(1,length(tstop)))~inf, data=tvdata), main="", lty=c(1,2), col=c(1,2), xlab="time (days)", ylab="S_hat")
legend(30, 0.8, legend=c("Control","inf"), lty = c(1,2), col=c(1,2), bty = "n", cex=0.7)
tvdataSplit <- split(tvdata, list(tvdata$LOSpreop))
View(tvdata)
tvdataSplit <- split(tvdata, list(tvdata$LOSpreop<5))
str(tvdataSplit)
tra <- matrix(FALSE, 3, 3, dimnames = list(as.character(0:2), as.character(0:2)))  # admission-infection-death/discharge
tra[1, 2:3] <- TRUE
tra[2, 3] <- TRUE
## create etm format array
numCases.inf <- nrow(survData.inf)
numCases.mix <- nrow(survData.mix)
id <- tvdata$id
entry <- tvdata$tstart
exit  <- tvdata$tstop		# failure times
# states
from <- c(rep(0:1,numCases.inf), rep(0,numCases.mix))
to <-  c(rep(1:2,numCases.inf), rep(2,numCases.mix))
to2 <- to			# ifelse(tvdata$disch==1,3,to)	# same as status in tvdata i.e. censoring
#age <- tvdata$age
#agegr <- tvdata$agegr
#sex <- tvdata$sex
msm.data <- data.frame(id,entry,exit,from,to,to2)
mvna.data <- mvna(msm.data, c("0","1","2"), tra, cens.name="cens")
etm.data <- etm(msm.data, c("0","1","2"), tra, "cens", s=0)
clos.data <- clos(etm.data)
plot(mvna.data)
summary(etm.data)
xyplot(etm.data)
plot(clos.data)
clos.data
View(tvdata)
names(tvdataSpli)
names(tvdataSplit)
tvdata.LOS <- tvdata
#tvdata.LOS <- tvdataSplit[[1]]
tra <- matrix(FALSE, 3, 3, dimnames = list(as.character(0:2), as.character(0:2)))  # admission-infection-death/discharge
tra[1, 2:3] <- TRUE
tra[2, 3] <- TRUE
## create etm format array
numCases.inf <- sum(tvdata.LOS$inf==1)
numCases.mix <- nrow(tvdata.LOS)-2*numCases.inf
id <- tvdata.LOS$id
entry <- tvdata.LOS$tstart
exit  <- tvdata.LOS$tstop		# failure times
# states
from <- c(rep(0:1,numCases.inf), rep(0,numCases.mix))
to <-  c(rep(1:2,numCases.inf), rep(2,numCases.mix))
to2 <- to			# ifelse(tvdata$disch==1,3,to)	# same as status in tvdata i.e. censoring
#age <- tvdata$age
#agegr <- tvdata$agegr
#sex <- tvdata$sex
msm.data <- data.frame(id,entry,exit,from,to,to2)
mvna.data <- mvna(msm.data, c("0","1","2"), tra, cens.name="cens")
etm.data <- etm(msm.data, c("0","1","2"), tra, "cens", s=0)
clos.data <- clos(etm.data)
plot(mvna.data)
summary(etm.data)
xyplot(etm.data)
plot(clos.data)
clos.data
?stepAIC
tvdata.LOS <- tvdataSplit[[1]]
tra <- matrix(FALSE, 3, 3, dimnames = list(as.character(0:2), as.character(0:2)))  # admission-infection-death/discharge
tra[1, 2:3] <- TRUE
tra[2, 3] <- TRUE
## create etm format array
numCases.inf <- sum(tvdata.LOS$inf==1)
numCases.mix <- nrow(tvdata.LOS)-2*numCases.inf
View(tvdata.LOS)
tvdataSplit <- split(tvdata, list(tvdata$LOSpreop>0))
tvdata.LOS <- tvdataSplit[[1]]
View(tvdata.LOS)
tra <- matrix(FALSE, 3, 3, dimnames = list(as.character(0:2), as.character(0:2)))  # admission-infection-death/discharge
tra[1, 2:3] <- TRUE
tra[2, 3] <- TRUE
## create etm format array
numCases.inf <- sum(tvdata.LOS$inf==1)
numCases.mix <- nrow(tvdata.LOS)-2*numCases.inf
id <- tvdata.LOS$id
entry <- tvdata.LOS$tstart
exit  <- tvdata.LOS$tstop		# failure times
# states
from <- c(rep(0:1,numCases.inf), rep(0,numCases.mix))
to <-  c(rep(1:2,numCases.inf), rep(2,numCases.mix))
to2 <- to			# ifelse(tvdata$disch==1,3,to)	# same as status in tvdata i.e. censoring
#age <- tvdata$age
#agegr <- tvdata$agegr
#sex <- tvdata$sex
msm.data <- data.frame(id,entry,exit,from,to,to2)
mvna.data <- mvna(msm.data, c("0","1","2"), tra, cens.name="cens")
etm.data <- etm(msm.data, c("0","1","2"), tra, "cens", s=0)
clos.data <- clos(etm.data)
plot(mvna.data)
summary(etm.data)
xyplot(etm.data)
plot(clos.data)
clos.data
tvdata.LOS <- tvdataSplit[[2]]
tra <- matrix(FALSE, 3, 3, dimnames = list(as.character(0:2), as.character(0:2)))  # admission-infection-death/discharge
tra[1, 2:3] <- TRUE
tra[2, 3] <- TRUE
## create etm format array
numCases.inf <- sum(tvdata.LOS$inf==1)
numCases.mix <- nrow(tvdata.LOS)-2*numCases.inf
id <- tvdata.LOS$id
entry <- tvdata.LOS$tstart
exit  <- tvdata.LOS$tstop		# failure times
# states
from <- c(rep(0:1,numCases.inf), rep(0,numCases.mix))
to <-  c(rep(1:2,numCases.inf), rep(2,numCases.mix))
to2 <- to			# ifelse(tvdata$disch==1,3,to)	# same as status in tvdata i.e. censoring
msm.data <- data.frame(id,entry,exit,from,to,to2)
mvna.data <- mvna(msm.data, c("0","1","2"), tra, cens.name="cens")
etm.data <- etm(msm.data, c("0","1","2"), tra, "cens", s=0)
clos.data <- clos(etm.data)
plot(mvna.data)
summary(etm.data)
xyplot(etm.data)
plot(clos.data)
clos.data
names(tvdataSplit)
names(tvdataSplit)<-c("Lospreop0", "LOSpreop>0")
names(tvdataSplit)
tvdata.LOS <- tvdataSplit$Lospreop0
PHmodel <- coxph(Surv(tstart, tstop, rep.int(1,length(tstop)))~
cluster(id)+inf+antimicpx+asascore+bmicat+bloodloss+complicatedcsd+csdtype+diab+LOSpreop+durationoperation+durationofactivelabour+woundclass, data=tvdata.naomit)
outcx <- stepAIC(PHmodel, scope = list(lower = ~cluster(id)+inf))
PHmodel <- coxph(Surv(tstart, tstop, rep.int(1,length(tstop)))~cluster(id)+inf+LOSpreop+asascore+durationofactivelabour+bloodloss+csdtype, data=tvdata)
PHmodel
tvdataSplit <- split(tvdata, list(tvdata$LOSpreop>0))
names(tvdataSplit)<-c("Lospreop0", "LOSpreop>0")
tvdata.LOS <- tvdataSplit$Lospreop0
tra <- matrix(FALSE, 3, 3, dimnames = list(as.character(0:2), as.character(0:2)))  # admission-infection-death/discharge
tra[1, 2:3] <- TRUE
tra[2, 3] <- TRUE
## create etm format array
numCases.inf <- sum(tvdata.LOS$inf==1)
numCases.mix <- nrow(tvdata.LOS)-2*numCases.inf
id <- tvdata.LOS$id
entry <- tvdata.LOS$tstart
exit  <- tvdata.LOS$tstop
from <- c(rep(0:1,numCases.inf), rep(0,numCases.mix))
to <-  c(rep(1:2,numCases.inf), rep(2,numCases.mix))
to2 <- to			# ifelse(tvdata$disch==1,3,to)
## multistate model array
msm.data <- data.frame(id,entry,exit,from,to,to2)
mvna.data <- mvna(msm.data, c("0","1","2"), tra, cens.name="cens")
etm.data <- etm(msm.data, c("0","1","2"), tra, "cens", s=0)
clos.data <- clos(etm.data)
plot(mvna.data)
summary(etm.data)
xyplot(etm.data)
plot(clos.data)
clos.data   # exxcess length of stay
tvdata.LOS <- tvdataSplit$LospreopOver0
tvdataSplit <- split(tvdata, list(tvdata$LOSpreop>0))
names(tvdataSplit)<-c("LOSpreop0", "LOSpreopOver0")
## choose which (stratified) data to use
tvdata.LOS <- tvdata
## create etm format array
numCases.inf <- sum(tvdata.LOS$inf==1)
numCases.mix <- nrow(tvdata.LOS)-2*numCases.inf
id <- tvdata.LOS$id
entry <- tvdata.LOS$tstart
exit  <- tvdata.LOS$tstop
from <- c(rep(0:1,numCases.inf), rep(0,numCases.mix))
to <- c(rep(1:2,numCases.inf), rep(2,numCases.mix))
to2 <- to			# ifelse(tvdata$disch==1,3,to)
## multistate model array
msm.data <- data.frame(id,entry,exit,from,to,to2)
mvna.data <- mvna(msm.data, c("0","1","2"), tra, cens.name="cens")
tvdata.LOS <- tvdataSplit$LOSpreop0
## create etm format array
numCases.inf <- sum(tvdata.LOS$inf==1)
numCases.mix <- nrow(tvdata.LOS)-2*numCases.inf
id <- tvdata.LOS$id
entry <- tvdata.LOS$tstart
exit  <- tvdata.LOS$tstop
from <- c(rep(0:1,numCases.inf), rep(0,numCases.mix))
to <- c(rep(1:2,numCases.inf), rep(2,numCases.mix))
to2 <- to			# ifelse(tvdata$disch==1,3,to)
## multistate model array
msm.data <- data.frame(id,entry,exit,from,to,to2)
mvna.data <- mvna(msm.data, c("0","1","2"), tra, cens.name="cens")
tvdata.LOS <- tvdataSplit$LospreopOver0
